# 目标
  使用kotlin语言，组件化，MVVM架构，LiveData、Kotlin协程等相关搭建项目；

  如何将网络请求封装的更优雅些

# Kotlin 协程Coroutine  Suspend
- Kotlin - 协程 简介 https://www.jianshu.com/p/1de0adc92fbc

  - 线程：线程从属于进程，是程序的实际执行者；一个进程至少包含一个线程，线程拥有属于自己的栈空间；栈是线程私有的；
    - 线程调度与缺点：线程堆内存共享，任何一个线程出现问题，整个进程中所有线程都崩溃；
    - 线程占用内存：64位的Linux为每个线程的栈分配了8M内存；
    - 线程竞争：解决线程申请内存竞争问题，每个线程预先申请堆空间，同时还预先分配64M的内存作为堆内存池。
    - 线程切换：线程切换由内核控制，一次线程切换在几十纳秒-几微秒之间，消耗cpu的运算能力；



  - 协程基本用法：https://www.jianshu.com/p/6e6835573a9c
               https://www.jianshu.com/p/e4e7ae9473de

    协程通过将复杂性放入库来简化异步编程，程序的逻辑可以在协程中顺序地表达；而底层库会为我们解决其异步性。该库可以将用户代码
    的相关部分包装为回调、订阅相关事件、在不同线程上调度执行，而代码则保持如同顺序执行一样简单。

    协程就像非常轻量级的线程。
    线程由系统调度，线程切换或线程阻塞的开销都比较大。
    协程依赖于线程，协程挂起时不需要阻塞线程，几乎无代价，协程是由开发者控制的。一个线程可以创建任意个协程；

    优点：省去了传统 Thread 多线程并发机制中切换线程时带来的线程上下文切换、线程状态切换、Thread 初始化上的性能损耗，
         能大幅度唐提高并发性能。

    kotlin中协程最重要的一个特性：可以用同步的方式写出异步的代码。

    协程中挂起的本质：挂起的对象是协程；
    那此时又是从哪里挂起？从当前线程挂起。换句话说，就是这个协程从正在执行它的线程上脱离。


  - runBlocking：启动协程任务会阻断当前线程，直到该协程执行结束；
    - launch:Job：返回一个Job类型的对象；是CoroutineScope的一个扩展函数，CoroutineScope简单来说就是协程的作用范围；
      参数：
      - 协程上下文：
      - 协程启动模式：
      - 协程体：







https://gitee.com/QingDian_Fan/MVVMDemo/blob/master/app/build.gradle

https://blog.csdn.net/yuzhiqiang_1993/article/details/101012090